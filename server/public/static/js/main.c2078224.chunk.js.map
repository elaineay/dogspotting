{"version":3,"sources":["components/ExpandItem/ExpandItem.js","api/index.js","components/List/Popup/Popup.js","components/List/UpdateItem.js","components/List/DeleteItem.js","components/List/ListFull.js","components/App/App.js","serviceWorker.js","reducers/items.js","reducers/index.js","index.js"],"names":["ExpandItem","className","this","props","curr","React","Component","api","axios","create","baseURL","apis","createSpot","payload","post","updateSpot","id","put","deleteSpot","delete","getSpotById","get","getDogSpots","Popup","onChangeEvent","event","value","target","setState","state","name","handleUpdate","a","size","text","then","res","componentDidMount","dogspot","data","onChange","type","onClick","closePopup","UpdateItem","popup","togglePopup","bind","DeleteItem","deleteItem","preventDefault","handleChange","ListFull","dogspots","isLoading","onAdd","input","handleDelete","newDogspots","filter","_id","expandItem","apiResponse","isBoop","change","changeColour","map","item","key","connect","inputs","App","Boolean","window","location","hostname","match","action","combineReducers","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2078224.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ExpandItem.css'\r\n\r\nclass ExpandItem extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <span>\r\n        <p className = \"expandItem\">{this.props.curr}</p>\r\n      </span>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default ExpandItem;","import axios from 'axios' // promise-based HTTP async code\r\n\r\nconst api = axios.create({\r\n      baseURL: 'http://localhost:3000/api'\r\n})\r\n\r\nexport const createSpot = payload => api.post(`/dogspotting`, payload)\r\nexport const updateSpot = (id, payload) => api.put(`/dogspotting/${id}`, payload)\r\nexport const deleteSpot = id => api.delete(`/dogspotting/${id}`)\r\nexport const getSpotById = id => api.get(`/dogspotting/${id}`)\r\nexport const getDogSpots = () => api.get(`/dogspotting`)\r\n\r\nconst apis = {\r\n      createSpot,\r\n      updateSpot,\r\n      deleteSpot,\r\n      getSpotById,\r\n      getDogSpots,\r\n}\r\n\r\nexport default apis","import React from 'react';\r\nimport './Popup.css';\r\nimport api from './../../../api';\r\n\r\nclass Popup extends React.Component {\r\n      constructor(props) {\r\n            super(props)\r\n\r\n            this.state = {\r\n                  id: this.props.id,\r\n                  size: \"\",\r\n                  text: \"\",\r\n            }\r\n      }\r\n\r\n      render() {\r\n            return (\r\n                  <span className='popup'>\r\n                        <div className='popup_inner'>\r\n                              <h1>Update An Existing Spotting</h1>\r\n\r\n                              <div className = \"formInput\">\r\n                                    <form>\r\n                                          <select name = \"size\" value = {this.state.size}\r\n                                          onChange = {this.onChangeEvent}>\r\n                                          <option value = \"size unknown\">Pick Pupper Size!</option>\r\n                                          <option value = \"smol\">Smol</option>\r\n                                          <option value = \"medium\">Medium</option>\r\n                                          <option value = \"chonk\">Chonk</option>\r\n                                          </select>\r\n\r\n                                          <input name = \"text\" type =\"text\" value = {this.state.text} \r\n                                          onChange = {this.onChangeEvent}/>\r\n\r\n                                          <input type = \"submit\" value = \"Update dog spotting\" onClick = {this.handleUpdate}/>\r\n                                    </form>\r\n                              </div>\r\n\r\n                              <button onClick={this.props.closePopup}>Close</button>\r\n                        </div>\r\n                  </span>\r\n            );\r\n      }\r\n\r\n      onChangeEvent = event => {\r\n            const value = event.target.value\r\n            this.setState ({\r\n                  ...this.state,\r\n                  [event.target.name]: value\r\n            });\r\n      }\r\n            \r\n\r\n      handleUpdate = async () => {\r\n            const { id, size, text } = this.state; \r\n            const payload = { size, text };\r\n\r\n            await api.updateSpot(id, payload)\r\n                  .then(res => {\r\n                        this.setState({\r\n                              size: \"\",\r\n                              text: \"\",\r\n                        })\r\n                  })\r\n      }\r\n\r\n      componentDidMount = async () => {\r\n            const { id } = this.state\r\n            const dogspot = await api.getSpotById(id);\r\n\r\n            this.setState({\r\n                  size: dogspot.data.data.size,\r\n                  text: dogspot.data.data.text\r\n            })\r\n      }\r\n}\r\n\r\nexport default Popup;","import React from \"react\";\r\nimport Popup from './Popup/Popup';\r\nimport './List.css';\r\n\r\n// https://www.skptricks.com/2019/01/create-simple-popup-example-in-react.html\r\nclass UpdateItem extends React.Component {\r\n      constructor(props) {\r\n            super(props);\r\n            this.state = { popup: false };\r\n      }\r\n\r\n      render() {\r\n            return (\r\n                  <span>\r\n                        <button className = \"update\" onClick={this.togglePopup.bind(this)} >\r\n                              Update\r\n                        </button> \r\n\r\n                        {this.state.popup ?\r\n                              <Popup \r\n                                    closePopup = { this.togglePopup.bind(this) }\r\n                                    id = { this.props.id }\r\n                              />\r\n                              : null\r\n                        }\r\n                  </span>\r\n                 \r\n            )\r\n      }\r\n\r\n      togglePopup() {\r\n            this.setState({\r\n                  popup: !this.state.popup\r\n            });\r\n      }\r\n}\r\n\r\nexport default UpdateItem;","import React from \"react\";\r\nimport api from \"../../api\";\r\nimport './List.css';\r\n\r\nclass DeleteItem extends React.Component {\r\n      render() {\r\n            return (\r\n                  <button className=\"delete\" onClick={this.deleteItem}> \r\n                        Delete\r\n                  </button>\r\n            )\r\n      }\r\n\r\n      deleteItem = event => {\r\n            event.preventDefault();\r\n            api.deleteSpot(this.props.id);\r\n            this.props.handleChange(this.props.id);\r\n      }\r\n}\r\n\r\nexport default DeleteItem;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport ExpandItem from '../ExpandItem/ExpandItem';\r\n// import * as actions from '../../actions/index.js';\r\nimport { connect } from 'react-redux';\r\nimport './List.css';\r\nimport api from '../../api';\r\nimport UpdateItem from './UpdateItem';\r\nimport DeleteItem from './DeleteItem';\r\n\r\nclass ListFull extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      input: {\r\n        size: \"\",\r\n        text: \"\"\r\n      },\r\n      dogspots: [],\r\n      isLoading: false,\r\n      apiResponse: \"\",\r\n      curr: \"\",\r\n      isBoop: true,\r\n    }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await api.getDogSpots().then(dogspots => {\r\n\r\n      this.setState({\r\n        dogspots: dogspots.data.data,\r\n        isLoading: false,\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let change = this.state.isBoop ? \"whiteBoop\" : \"blackBoop\";\r\n    const {dogspots} = this.state;\r\n\r\n    return (\r\n      <div className=\"listFull\">\r\n        <div className=\"header\">\r\n          <strong>\r\n            DogSpotting Tracker\r\n          </strong>\r\n          <div>\r\n            <button className={change} onClick = {() => this.changeColour()}> \r\n              metaphorical snout boop\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className = \"formInput\">\r\n          <form>\r\n            <select name = \"size\" value = {this.state.input.size}\r\n                onChange = {this.onChangeEvent}>\r\n              <option value = \"size unknown\">Pick Pupper Size!</option>\r\n              <option value = \"smol\">Smol</option>\r\n              <option value = \"medium\">Medium</option>\r\n              <option value = \"chonk\">Chonk</option>\r\n            </select>\r\n\r\n            <input name = \"text\" type =\"text\" value = {this.state.input.text} \r\n                onChange = {this.onChangeEvent}/>\r\n\r\n            <input type = \"submit\" value = \"Dog spotted!\" onClick = {this.onAdd}/>\r\n          </form>\r\n        </div>\r\n        \r\n\r\n        <div >\r\n          { this.state.dogspots.map( item => (\r\n            <div key = {item._id} className = \"listItems\">\r\n              <span className=\"size\">\r\n                {item.size}\r\n              </span>\r\n              \r\n              <span onClick = {() =>this.expandItem(item)}>\r\n                {item.text}\r\n              </span>\r\n              \r\n              <span className = \"buttons\">\r\n                <UpdateItem id = {item._id}/>\r\n                <DeleteItem id = {item._id} handleChange = {this.handleDelete} />\r\n              </span>\r\n              \r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"header\">\r\n          <span>More Information:</span>\r\n        </div>\r\n          <ExpandItem curr = {this.state.curr}></ExpandItem>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  changeColour() {\r\n    this.setState({isBoop: !this.state.isBoop})\r\n  }\r\n\r\n  onAdd = async () => {\r\n    const {size, text} = this.state.input;\r\n    const payload = {size, text}\r\n\r\n    await api.createSpot(payload).then(res => {\r\n      this.setState({\r\n          input: {\r\n            size: \"\",\r\n            text: \"\"\r\n          }\r\n        })\r\n    })\r\n  }\r\n\r\n  handleDelete = id => {\r\n    const newDogspots = this.state.dogspots.filter(dogspot => dogspot._id !== id);\r\n    this.setState({dogspots: newDogspots});\r\n  }\r\n\r\n  expandItem = input => {\r\n    const curr = input.text;\r\n    this.setState({curr});\r\n  }\r\n\r\n  onChangeEvent = event => {\r\n    const input = {\r\n      ...this.state.input,\r\n      [event.target.name]: event.target.value\r\n    }\r\n    this.setState ({input});\r\n  }\r\n}\r\n\r\nListFull.propTypes = {\r\n  dispatch: PropTypes.func.isRequired,\r\n  inputs: PropTypes.array.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {inputs: state.input};\r\n}\r\n\r\nexport default connect(mapStateToProps)(ListFull);","import React from 'react';\r\nimport ListFull from '../List/ListFull';\r\nimport './App.css'\r\n\r\nfunction App () {\r\n  return (\r\n    <div className=\"app\">\r\n      <ListFull/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function input (\r\n      state = [\r\n            {id: 0, size: \"medium\", text: \"Dog spotted: golden retriever.\"},\r\n            {id: 1, size: \"medium\", text: \"Huskies at the park!\"},\r\n            {id: 2, size: \"medium\", text: \"A hypoallergenic king was spotted. 10/10 fluff.\"}\r\n      ], action) {\r\n      switch (action.type) {\r\n          case 'ADD_ITEM':\r\n              return [\r\n                    ...state,\r\n                    {\r\n                    size: action.size,\r\n                    text: action.text\r\n                    }\r\n                ]   \r\n              \r\n  \r\n          case 'DELETE_ITEM':\r\n              return [...state].filter((post) => {\r\n                    return post.id !== action.id\r\n              })\r\n          \r\n          default:\r\n              return state;\r\n      }\r\n  }\r\n\r\n  export default input","import { combineReducers } from 'redux'\r\nimport input from './items'\r\n\r\n\r\nexport default combineReducers ({\r\n    input\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}